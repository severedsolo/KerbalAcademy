    CONTRACT_TYPE
    {
        name = KerbalAcademyBootCamp
        title = Kerbal Academy: Boot Camp
		group = KerbalAcademy
        description = Your space program is suffering from a lack of @/roleStringPlural Take a kerbal through basic training.
		genericDescription = We are lacking Kerbals of a certain role. Kerbal Academy are willing to fund their training.
        synopsis = Take @/roleStringSingular through Boot Camp.
		notes = Your new recruit will be advanced to level 1 and half of your hire cost will be re-imbursed when you complete the contract.
        completedMessage = Excellent. Your new recruit has a nice headstart.
        agent = Kerbal Academy
        minExpiry = 1
        maxExpiry = 7
		maxSimultaneous = 1
        cancellable = true
        declinable = true
        prestige = Significant
        targetBody = HomeWorld()
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = NextKerbalHireCost()/2
        failureReputation = 0
        failureFunds = 0
        advanceFunds = 0		

		DATA
		{
			type = List<Kerbal>
			requiredValue = false
			pilots = AllKerbals().Where(k => k.ExperienceTrait() == Pilot && k.RosterStatus() == Available && k.Type() == Crew)
			scientists = AllKerbals().Where(k => k.ExperienceTrait() == Scientist && k.RosterStatus() == Available && k.Type() == Crew)
			engineers = AllKerbals().Where(k => k.ExperienceTrait() == Engineer && k.RosterStatus() == Available && k.Type() == Crew)
		}
		
		DATA
		{
			type = string
			roleStringPlural = @/pilots.Count() == 0 ? "Pilots." : @/scientists.Count() == 0 ? "Scientists." : "Engineers."
			hidden = true
		}
		
		DATA
		{
			type = string
			roleStringSingular = @/pilots.Count() == 0 ? "a pilot" : @/scientists.Count() == 0 ? "a scientist" : "an engineer"
			hidden = true
		}

		DATA
		{
		type = Biome
		biome = MainKSCBiomes().Where(b => b.RemainingScience()>0).Random()
		fallbackBiome = MainKSCBiomes().Random()
		hidden = true
		}

		DATA
		{
			type = List<ScienceSubject>
			requiredValue = false
			experimentList = AllScienceSubjectsByBiome([@biome]).Where(s => s.RemainingScience()>0)
			fallbackList = AllScienceSubjectsByBiome([@fallbackBiome])
		}

				DATA
		{
			type = ScienceSubject
			uniquenessCheck = GROUP_ACTIVE
			experiment = @/experimentList.Count() >0 ? @/experimentList.Random() : @/fallbackList.Random()
			title = Must have an experiment for scientists to complete.
		}

		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			parameter = BootCamp
			experience = 1
		}

	BEHAVIOUR
	{
		name = WaypointGenerator
		type = WaypointGenerator
		
		PQS_CITY
		{
			name = The Island Training Facility
			hidden = @/roleStringPlural == "Pilots." ? false : true
			icon = pressure
			pqsCity = IslandAirfield
		}
	}

	BEHAVIOUR
	{
    name = SpawnVessel
    type = SpawnVessel
	VESSEL
    {
        name = Training Drill
        craftURL = ContractPacks/KerbalAcademy/Ships/Driller.craft
        flagURL = ContractPacks/KerbalAcademy/Agents/KerbalAcademy
        vesselType = Base
        owned = true
		pqsCity = KSC
		pitch = 180
	}
	}
	
	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = PilotBootCamp
		parameter = ScientistBootCamp
		vessel = Training Drill
	}


		PARAMETER
		{
			name = BootCamp
			type = VesselParameterGroup
			define = BootCamp
			disableOnStateChange = true
			dissassociateVesselsOnContractCompletion = true
			title = Recruit @/roleStringSingular, then place them in a vessel capable of completing this mission.
			notes = If your new recruit is not an Engineer, please ignore the Training Drill.
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			trait = @/roleStringPlural == "Pilots." ? "Pilot" : @/roleStringPlural == "Scientists." ? "Scientist" : "Engineer"
			maxExperience = 0
			minCrew = 1
		}
		PARAMETER
		{
			name = PilotBootCamp
			type = All
			hideChildren = true
			title = Land within 500m of the waypoint at the Island Training Facility.
			disableOnStateChange = true
			PARAMETER
			{
				name = PilotBootCamp
				type = VisitWaypoint
				index = 0
			}

			PARAMETER
			{
				name = ReachState
				type = ReachState
				situation = LANDED
			}

			REQUIREMENT
			{
				name = PilotCheck
				type = Expression
				expression = (@/roleStringPlural == "Pilots.")
			}
		}
		PARAMETER
		{
			name = ScientistBootCamp
			type = CollectScience
			subject = @/experiment
			recoveryMethod = None
		
		
			REQUIREMENT
			{
				name = ScientistCheck
				type = Expression
				expression = (@/roleStringPlural == "Scientists.")
			}
		}
	}
		PARAMETER
		{
			name = EngineerBootCamp
			type = VesselParameterGroup
			title = Perform Drilling Simulations on board the Training Drill.
			vessel = Training Drill
			PARAMETER
			{
				name = HasCrew
				type = HasCrew
				trait = Engineer
				maxExperience = 0
				minCrew = 1
			}
		REQUIREMENT
		{
				name = EngineerCheck
				type = Expression
				expression = (@/roleStringPlural == "Engineers.")
		}
		}
	

	PARAMETER
	{
    name = Duration
    type = Duration
	duration = 5m
	preWaitText = Waiting for Simulation to begin.
	waitingText = Simulation in Progress
	completionText = Simulation Complete
	startCriteria = PARAMETER_COMPLETION
	parameter = EngineerBootCamp
	
	REQUIREMENT
	{
		name = EngineerCheck
		type = Expression
		expression = (@/roleStringPlural == "Engineers.")
	}
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/pilots.Count() == 0 || @/scientists.Count() == 0 || @/engineers.Count() == 0)
		title = Must be lacking in Kerbals of a certain role.
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = KerbalAcademyBootCamp
		minCount = 0
		cooldownDuration = 30d
	}
}

	
		
		

		
